[gd_resource type="VisualShader" load_steps=8 format=2]

[sub_resource type="VisualShaderNodeTextureUniform" id=4]
uniform_name = "TextureUniform"

[sub_resource type="VisualShaderNodeTextureUniform" id=18]
uniform_name = "snow_texture"

[sub_resource type="VisualShaderNodeColorOp" id=19]
output_port_for_preview = 0
operator = 4

[sub_resource type="VisualShaderNodeTextureUniform" id=8]
uniform_name = "TextureUniform2"

[sub_resource type="VisualShaderNodeVectorOp" id=10]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0.3, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=11]

[sub_resource type="VisualShaderNodeInput" id=14]
input_name = "vertex"

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D TextureUniform2;
uniform sampler2D snow_texture;
uniform sampler2D TextureUniform;



void vertex() {
// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(TextureUniform2, UV.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// VectorOp:3
	vec3 n_in3p1 = vec3(0.00000, 0.30000, 0.00000);
	vec3 n_out3p0 = n_out2p0 * n_in3p1;

// Input:5
	vec3 n_out5p0 = VERTEX;

// VectorOp:4
	vec3 n_out4p0 = n_out3p0 + n_out5p0;

// Output:0
	VERTEX = n_out4p0;

}

void fragment() {
// TextureUniform:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 n_tex_read = texture(snow_texture, UV.xy);
		n_out3p0 = n_tex_read.rgb;
		n_out3p1 = n_tex_read.a;
	}

// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(TextureUniform, UV.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// ColorOp:4
	vec3 n_out4p0;
	{
		float base = n_out3p0.x;
		float blend = n_out2p0.x;
		if (base < 0.5) {
			n_out4p0.x = 2.0 * base * blend;
		} else {
			n_out4p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out3p0.y;
		float blend = n_out2p0.y;
		if (base < 0.5) {
			n_out4p0.y = 2.0 * base * blend;
		} else {
			n_out4p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out3p0.z;
		float blend = n_out2p0.z;
		if (base < 0.5) {
			n_out4p0.z = 2.0 * base * blend;
		} else {
			n_out4p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// Output:0
	ALBEDO = n_out3p0;
	NORMAL = n_out3p0;
	NORMALMAP = n_out4p0;
	NORMALMAP_DEPTH = dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333));

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -658, -57 )
nodes/vertex/0/position = Vector2( 480, 120 )
nodes/vertex/2/node = SubResource( 8 )
nodes/vertex/2/position = Vector2( -500, 320 )
nodes/vertex/3/node = SubResource( 10 )
nodes/vertex/3/position = Vector2( -160, 260 )
nodes/vertex/4/node = SubResource( 11 )
nodes/vertex/4/position = Vector2( 220, 380 )
nodes/vertex/5/node = SubResource( 14 )
nodes/vertex/5/position = Vector2( -60, 460 )
nodes/vertex/connections = PoolIntArray( 2, 0, 3, 0, 4, 0, 0, 0, 5, 0, 4, 1, 3, 0, 4, 0 )
nodes/fragment/0/position = Vector2( 360, 140 )
nodes/fragment/2/node = SubResource( 4 )
nodes/fragment/2/position = Vector2( -400, 220 )
nodes/fragment/3/node = SubResource( 18 )
nodes/fragment/3/position = Vector2( -400, 20 )
nodes/fragment/4/node = SubResource( 19 )
nodes/fragment/4/position = Vector2( 40, 220 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 2, 0, 4, 1, 3, 0, 0, 0, 4, 0, 0, 8, 2, 0, 0, 9, 3, 0, 0, 7 )
